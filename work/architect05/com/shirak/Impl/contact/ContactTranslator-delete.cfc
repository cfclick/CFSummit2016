component extends="conference.Impl.BaseTranslator"  output="false"
{
	import conference.BusinessEntities.BaseEntity;
	//import conference.Impl.contact.ContactAddress;
	import conference.repository.autogenerated.AddressType;
	import conference.BusinessEntities.Person;
	
	public ContactTranslator function init() {
		return this;
	}
	
	public Person[] function toArrayOfPerson( required query qryResultSet ) {
		var qry = arguments.qryResultSet;
		var arrayOfPerson = [];
		
		for( var person in qry ) {
			var obj = toPerson( person );
			arrayOfPerson.append( obj );
		}

		return arrayOfPerson;
	}
	
	public Person function toPerson( required struct qryRowResultSet ) {
		var qRow = arguments.qryRowResultSet;
		var person = new Person();
		person.setPersonID(qRow.PersonID);
		person.setPersonTypeID(qRow.PersonTypeID);
		person.setConferenceID(qRow.ConferenceID);
		person.setName(qRow.Name);
		person.setGender(qRow.Gender);
		person.setIsActive(qRow.IsActive);
		person.setCreatedBy(qRow.CreatedBy);
		person.setCreatedDateTime(qRow.CreatedDateTime);
		person.setUpdatedBy(qRow.UpdatedBy);
		person.setUpdatedDateTime(qRow.UpdatedDateTime);
		return person;
	}
	
	public Address[] function toArrayOfAddress( required query qryResultSet ) {
		var qry = arguments.qryResultSet;
		var arrayOfAddress = [];
		
		for( var row in qry ) {
			var obj = toAddress( row );
			arrayOfAddress.append( obj );
		}
		return arrayOfAddress;
	}
	
	public Address function toAddress( required struct procResultSet ) {
		var add = arguments.procResultSet;
		
		var address = new Address();	
		address.setAddressID( add.AddressID );
		address.setAddressTypeID( add.AddressTypeID );
		address.setAddress1( add.Address1 );
		address.setAddress2( add.Address2 );
		address.setCity( add.City );
		address.setState( add.State );
		address.setZipCode( add.ZipCode );
		address.setIsActive( add.IsActive );
		address.setcreatedBy( add.createdBy );
		address.setcreatedDateTime( add.createdDateTime );
		address.setupdatedBy( add.updatedBy );
		address.setupdatedDateTime( add.updatedDateTime ) ;
		return address;
	}
	
	public ContactAddress function toContactAddress( required struct procResultSet ) {
		var add = arguments.procResultSet;
		var ContactAddress = new ContactAddress();	
		ContactAddress.AddressID = add.AddressID;
		ContactAddress.AddressTypeID = add.AddressTypeID;
		ContactAddress.Address1 = add.Address1;
		ContactAddress.Address2 = add.Address2;
		ContactAddress.City = add.City;
		ContactAddress.State = add.State;
		ContactAddress.ZipCode = add.ZipCode;
		ContactAddress.IsActive = add.IsActive;
		ContactAddress.AddressTypeName = add.AddressTypeName;
		ContactAddress.baseEntity = new BaseEntity();
		ContactAddress.baseEntity.createdBy = add.createdBy;
		ContactAddress.baseEntity.createdDateTime = add.createdDateTime;
		ContactAddress.baseEntity.updatedBy = add.updatedBy;
		ContactAddress.baseEntity.updatedDateTime = add.updatedDateTime;
		return ContactAddress;
	}
	
	
	public ContactAddress[] function toArrayOfContactAddress( required query qryResultSet ) {
		var address_qry = arguments.qryResultSet;
		var ContactAddresses = [];
		
		for( var address in address_qry ) {
			var contactAddress = toContactAddress( address );
			ContactAddresses.append( contactAddress );
		}

		return ContactAddresses;
	}
}