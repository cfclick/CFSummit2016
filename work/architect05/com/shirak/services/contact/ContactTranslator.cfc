component extends="conference.services.BaseTranslator"  output="false"
{
	import conference.services.BaseEntity;
	import conference.services.contact.ContactAddress;
	import conference.repository.autogenerated.AddressType;
	import conference.repository.autogenerated.Person;
	
	public ContactTranslator function init() {
		return this;
	}
	
	public Person[] function toArrayOfPerson( required query qryResultSet ) {
		var qry = arguments.qryResultSet;
		var arrayOfPerson = [];
		
		for( var person in qry ) {
			var obj = toPerson( person );
			arrayOfPerson.append( obj );
		}

		return arrayOfPerson;
	}
	
	public Person function toPerson( required struct qryRowResultSet ) {
		var qRow = arguments.qryRowResultSet;
		var person = new Person();
		
		person.personID = qRow.PersonID;
		person.personTypeID = qRow.PersonTypeID;
		person.name = qRow.Name;
		person.gender = qRow.Gender;
		person.isActive = qRow.IsActive;
		person.createdBy = qRow.CreatedBy;
		person.createdDateTime = qRow.CreatedDateTime;
		person.updatedBy = qRow.UpdatedBy;
		person.updatedDateTime = qRow.UpdatedDateTime;
		
		return person;
	}
	
	public ContactAddress function toContactAddress( required struct procResultSet ) {
		var add = arguments.procResultSet;
		var ContactAddress = new ContactAddress();	
		ContactAddress.AddressID = add.AddressID;
		ContactAddress.AddressTypeID = add.AddressTypeID;
		ContactAddress.Address1 = add.Address1;
		ContactAddress.Address2 = add.Address2;
		ContactAddress.City = add.City;
		ContactAddress.State = add.State;
		ContactAddress.ZipCode = add.ZipCode;
		ContactAddress.IsActive = add.IsActive;
		ContactAddress.AddressTypeName = add.AddressTypeName;
		ContactAddress.baseEntity = new BaseEntity();
		ContactAddress.baseEntity.createdBy = add.createdBy;
		ContactAddress.baseEntity.createdDateTime = add.createdDateTime;
		ContactAddress.baseEntity.updatedBy = add.updatedBy;
		ContactAddress.baseEntity.updatedDateTime = add.updatedDateTime;
		return ContactAddress;
	}
	
	
	public ContactAddress[] function toArrayOfContactAddress( required query qryResultSet ) {
		var address_qry = arguments.qryResultSet;
		var ContactAddresses = [];
		
		for( var address in address_qry ) {
			var contactAddress = toContactAddress( address );
			ContactAddresses.append( contactAddress );
		}

		return ContactAddresses;
	}
}