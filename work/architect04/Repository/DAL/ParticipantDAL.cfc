component extends="conference.Injector" output="false" 
{	
	property name="personGTW" inject="REP:PersonGateway";
	property name="addressGTW" inject="REP:AddressGateway";
	property name="conferenceGTW" inject="REP:ConferenceGateway";
	property name="conferenceDAO" inject="REP:ConferenceDAO";
	property name="lectureDAO" inject="REP:LectureDAO";

	import conference.Repository.AutoGenerated.Person;
	import conference.Repository.AutoGenerated.Conference;
	import conference.Repository.AutoGenerated.Lecture;	
	import conference.BusinessEntities.Participant;
	
	function init(){
		return initDI( this );
	}
	
	public Participant[] function listParticipants(){
		var participants = [];
		var persons = [];
		var lectures = [];
		persons = this.personGTW.getALL();
		
		for( var person in persons ){
		 	var participant = new Participant();
		 	//Person
		 	participant.person = person;
		 	//End
		 	//Conference
		 	var conference = new Conference();
		 	conference =  this.conferenceDAO.read( person.getConferenceid() ); 			 	
		 	participant.conference = conference;
		 	//end
		 	//Lectures
		 	var lecture = new Lecture();
		 	lectures = listLecturesByPersonID( person.getPersonID() );
		 	participant.lectures = lectures;
		 	participants.append( participant );
		}
		/*
		var addresses = [];
		var person = new Person();
		var address = new Address();
		var conference = new Conference();
		var conf_session = new Session();*/
		
		return participants;
	}
	
	public Lecture[] function listLecturesByPersonID( required numeric personID ){
		var id = arguments.personID;
		writeDump(id);
		var lectures = [];
		var i = 1;
		var qry = "";		
		var q = new query();
		q.setdatasource("dsnConference");
		q.addParam(name="personID",value=id,cfsqltype="numeric");
		q.setsql("SELECT *
					FROM Map.PersonLecture 
					where personid = :personID");
		qry = q.execute().getresult();	
		//* load value objects */		
		for(var q in qry )
		{
			lecture = new Lecture();
			lecture = this.lectureDAO.read( q.Lectureid );
			lectures.append(lecture);
			/*if( !isNull( qry.Lectureid[i] ) && len( qry.Lectureid[i] ) ) obj.setLectureid(qry.Lectureid[i]);
			if( !isNull( qry.Title[i] ) && len( qry.Title[i] ) ) obj.setTitle(qry.Title[i]);
			if( !isNull( qry.Description[i] ) && len( qry.Description[i] ) ) obj.setDescription(qry.Description[i]);
			if( !isNull( qry.Stratdatetime[i] ) && len( qry.Stratdatetime[i] ) ) obj.setStratdatetime(qry.Stratdatetime[i]);
			if( !isNull( qry.Enddatetime[i] ) && len( qry.Enddatetime[i] ) ) obj.setEnddatetime(qry.Enddatetime[i]);
			if( !isNull( qry.Createdby[i] ) && len( qry.Createdby[i] ) ) obj.setCreatedby(qry.Createdby[i]);
			if( !isNull( qry.Crerateddatetime[i] ) && len( qry.Crerateddatetime[i] ) ) obj.setCrerateddatetime(qry.Crerateddatetime[i]);
			if( !isNull( qry.Updatedby[i] ) && len( qry.Updatedby[i] ) ) obj.setUpdatedby(qry.Updatedby[i]);
			if( !isNull( qry.Updateddatetime[i] ) && len( qry.Updateddatetime[i] ) ) obj.setUpdateddatetime(qry.Updateddatetime[i]);
			arrayAppend(lectures, obj);*/
		}
		/* return success */
		return lectures;
	}
}